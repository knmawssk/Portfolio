# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KD-3u1ao4AGkoXWiwBj7B0pvs2vx3QIC
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_excel("AI_dataset.xlsx")
df

import pandas as pd
from transformers import pipeline
from langdetect import detect
from nltk.stem.snowball import SnowballStemmer


def predict_with_keywords(text):
    text_lower = text.lower()

stemmer = SnowballStemmer("russian")

sentiment_analyzer = pipeline(
    "sentiment-analysis",
    model="blanchefort/rubert-base-cased-sentiment",
    tokenizer="blanchefort/rubert-base-cased-sentiment"
)

def analyze_sentiment(text):
    try:
        lang = detect(text)

        if lang == 'ru':
            result = sentiment_analyzer(text)[0]
            return 1 if result['label'] == 'POSITIVE' else 0

        else:
            positive_words = ["жақсы", "керемет", "тамаша", "ұнады"]
            negative_words = ["жаман", "қанағаттанбаған", "өкінішті", "жоқ", "ашпады", "күтпеді", "ашқан жоқ", "ашпад", "күттім"]

            if any(word in text.lower() for word in positive_words):
                return 1
            elif any(word in text.lower() for word in negative_words):
                return 0
            else:
                return 1

    except:
        return -1

def stem_text(text):
    try:
        words = text.split()
        stemmed_words = [stemmer.stem(word) for word in words]
        return ' '.join(stemmed_words)
    except:
        return text

new_df = pd.DataFrame({
    'Описание': df['Описание'].apply(stem_text),
    'Решение': df['Описание'].apply(analyze_sentiment)
})

new_df = new_df[new_df['Решение'] != -1]

print(new_df.head())

print("\nSentiment distribution:")
print(new_df['Решение'].value_counts())

new_df

X = new_df['Описание']
y = new_df['Решение']

print(f"X shape: {X.shape}")
print(f"y shape: {y.shape}")
print("\nClass distribution:")
print(y.value_counts())

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    test_size=0.2,
    random_state=42,
    stratify=y
)

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(
    max_features=10000,
    ngram_range=(1, 2),
    stop_words=None,
    analyzer='word'
)

X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(
    max_iter=1000,
    class_weight='balanced'
)
model.fit(X_train_tfidf, y_train)

from sklearn.metrics import classification_report

y_pred = model.predict(X_test_tfidf)
print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
from sklearn.metrics import confusion_matrix

plt.figure(figsize=(8, 6))
new_df['Решение'].value_counts().plot.pie(
    autopct='%1.1f%%',
    colors=['#ff9999','#66b3ff'],
    labels=['Negative (0)', 'Positive (1)']
)
plt.title('Distribution of Sentiments')
plt.ylabel('')
plt.show()

def generate_wordcloud(texts, title):
    wordcloud = WordCloud(
        width=800,
        height=400,
        background_color='white',
        colormap='viridis'
    ).generate(' '.join(texts))

    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.title(title)
    plt.axis('off')
    plt.show()

generate_wordcloud(
    df[new_df['Решение'] == 1]['Описание'],
    'Frequent Words in Positive Reviews'
)
generate_wordcloud(
    df[new_df['Решение'] == 0]['Описание'],
    'Frequent Words in Negative Reviews'
)

if 'true_sentiment' in df.columns:
    cm = confusion_matrix(df['true_sentiment'], new_df['Решение'])
    plt.figure(figsize=(6, 6))
    sns.heatmap(
        cm,
        annot=True,
        fmt='d',
        cmap='Blues',
        xticklabels=['Predicted Negative', 'Predicted Positive'],
        yticklabels=['Actual Negative', 'Actual Positive']
    )
    plt.title('Sentiment Analysis Confusion Matrix')
    plt.show()

    print(classification_report(df['true_sentiment'], new_df['Решение']))
else:
    print("No ground truth labels ('true_sentiment') available for confusion matrix")

